#!/usr/bin/env python
# LICENSED INTERNAL CODE. PROPERTY OF IBM.
# IBM Research Zurich Licensed Internal Code
# (C) Copyright IBM Corp. 2020
# ALL RIGHTS RESERVED
import os
from pathlib import Path

import click
import pandas as pd

import rxn_reaction_preprocessing as rrp


@click.command()
@click.argument('input_file_path', type=click.Path(exists=True), required=True)
@click.argument('output_directory', type=click.Path(), required=True)
@click.option(
    '--split-ratio',
    default=0.05,
    help='The column on which to base the stable split.',
    show_default=True
)
@click.option(
    '--index-column',
    default='rxn',
    help='The split ration between training, and test and validation sets.',
    show_default=True
)
@click.option(
    '--seed',
    default=0,
    help='Seed for the hashing function used for splitting.',
    show_default=True
)
def cli(
    input_file_path: str, output_directory: str, split_ratio: float, index_column: str, seed: int
) -> None:
    """Split the dataset INPUT_FILE_PATH into train, validation, and test splits
    (will be written to OUTPUT_DIRECTORY).
    """
    df = pd.read_csv(input_file_path, lineterminator='\n')

    # Split into train, validation, and test sets, but do not export yet
    train, validation, test = rrp.StableDataSplitter.split(
        df, index_column, split_ratio=split_ratio, seed=seed
    )

    # Get the file name without the extension
    stem = Path(input_file_path).stem

    # Example of exporting one of the sets
    df.rxn[train].to_csv(os.path.join(output_directory, stem + '.train.csv'))
    df.rxn[validation].to_csv(os.path.join(output_directory, stem + '.validation.csv'))
    df.rxn[test].to_csv(os.path.join(output_directory, stem + '.test.csv'))


if __name__ == '__main__':
    cli()
