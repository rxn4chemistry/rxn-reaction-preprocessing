#!/usr/bin/env python
# LICENSED INTERNAL CODE. PROPERTY OF IBM.
# IBM Research Zurich Licensed Internal Code
# (C) Copyright IBM Corp. 2020
# ALL RIGHTS RESERVED
import re

import click
from rdkit import RDLogger

import rxn_reaction_preprocessing as rrp
from rxn_reaction_preprocessing.cleaner import remove_isotope_information

RDLogger.DisableLog('rdApp.*')


@click.command()
@click.argument('input_file_path', type=click.Path(exists=True), required=True)
@click.argument('output_file_path', type=click.Path(), required=True)
@click.option('--fragment-bond', default='.')
@click.option('--max-reactants', default=10)
@click.option('--max-agents', default=0)
@click.option('--max-products', default=1)
@click.option('--min-reactants', default=2)
@click.option('--min-agents', default=0)
@click.option('--min-products', default=1)
@click.option('--max-reactants_tokens', default=300)
@click.option('--max-agents_tokens', default=0)
@click.option('--max-products-tokens', default=200)
@click.option('--max-absolute-formal-charge', default=2)
def cli(
    input_file_path: str,
    output_file_path: str,
    fragment_bond: str,
    max_reactants: int,
    max_agents: int,
    max_products: int,
    min_reactants: int,
    min_agents: int,
    min_products: int,
    max_reactants_tokens: int,
    max_agents_tokens: int,
    max_products_tokens: int,
    max_absolute_formal_charge: int,
) -> None:
    """The entry point for this cli script.

    Args:
        input_file_path:  The input file path (one reaction SMARTS per line).
        output_file_path: The output file path.
        fragment_bond: The fragment bond character.
        max_reactants: The maximum number of reactants.
        max_agents: The maximum number of agents.
        max_products: The maximum number of products.
        min_reactants: The minimum number of reactants.
        min_agents: The minimum number of agents.
        min_products: The minimum number of products.
        max_reactants_tokens: The maximum number of reactants tokens.
        max_agents_tokens: The maximum number of agents tokens.
        max_products_tokens: The maximum number of products tokens.
        max_absolute_formal_charge: The maximum absolute formal charge.
    """

    # This is the function that is applied to each reaction.
    def merge_reactants_and_reagents(reaction: rrp.Reaction) -> rrp.Reaction:
        # Move agents to reactants
        reaction.remove_none()
        reaction.reactants.extend(reaction.agents)
        reaction.agents = []
        return reaction

    def remove_duplicates(reaction: rrp.Reaction) -> rrp.Reaction:
        # Remove products that are also reactants
        reaction.remove_precursors_from_products()
        return reaction.sort()

    # Create a instance of the mixed reaction filter with default values.
    # Make arguments for all properties in script
    mrf = rrp.MixedReactionFilter(
        max_reactants=max_reactants,
        max_agents=max_agents,
        max_products=max_products,
        min_reactants=min_reactants,
        min_agents=min_agents,
        min_products=min_products,
        max_reactants_tokens=max_reactants_tokens,
        max_agents_tokens=max_agents_tokens,
        max_products_tokens=max_products_tokens,
        max_absolute_formal_charge=max_absolute_formal_charge,
    )

    pp = rrp.Preprocessor.read_csv(input_file_path, 'rxn', fragment_bond=fragment_bond)

    # Remove duplicate reactions (useful for large dataset, this step is repeated later)
    pp.remove_duplicates()

    # In a first step the data is cleaned, in this case isotope information is removed
    pp.df.rxn = pp.df.rxn.apply(remove_isotope_information)

    # Apply the two functions above to all reactions, the remove_duplicate_molecules argument
    # is set to true to remove duplicate molecules within each reaction part
    pp.apply(merge_reactants_and_reagents)
    pp.apply(remove_duplicates, remove_duplicate_molecules=True)

    # Remove duplicate reactions
    pp.remove_duplicates()

    # Apply the mixed reaction filter instance defined above, enable verbose mode
    pp.filter(mrf, True)

    # Print the detailed stats
    pp.print_stats()

    # Drop the invalid reactions
    pp.remove_invalids()

    # After dropping invalid columns, display stats again (as an example)
    pp.df.to_csv(output_file_path)


if __name__ == '__main__':
    cli()
